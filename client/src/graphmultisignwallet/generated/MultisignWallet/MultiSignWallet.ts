// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ConfirmTransaction extends ethereum.Event {
  get params(): ConfirmTransaction__Params {
    return new ConfirmTransaction__Params(this);
  }
}

export class ConfirmTransaction__Params {
  _event: ConfirmTransaction;

  constructor(event: ConfirmTransaction) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get txIndex(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get balance(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ExecuteTransaction extends ethereum.Event {
  get params(): ExecuteTransaction__Params {
    return new ExecuteTransaction__Params(this);
  }
}

export class ExecuteTransaction__Params {
  _event: ExecuteTransaction;

  constructor(event: ExecuteTransaction) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get txIndex(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RevokeConfirmation extends ethereum.Event {
  get params(): RevokeConfirmation__Params {
    return new RevokeConfirmation__Params(this);
  }
}

export class RevokeConfirmation__Params {
  _event: RevokeConfirmation;

  constructor(event: RevokeConfirmation) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get txIndex(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SubmitTransaction extends ethereum.Event {
  get params(): SubmitTransaction__Params {
    return new SubmitTransaction__Params(this);
  }
}

export class SubmitTransaction__Params {
  _event: SubmitTransaction;

  constructor(event: SubmitTransaction) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get txIndex(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }
}

export class MultiSignWallet__getTransactionResult {
  value0: Address;
  value1: BigInt;
  value2: Bytes;
  value3: boolean;
  value4: BigInt;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: Bytes,
    value3: boolean,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromBytes(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }

  getTo(): Address {
    return this.value0;
  }

  getValue(): BigInt {
    return this.value1;
  }

  getData(): Bytes {
    return this.value2;
  }

  getExecuted(): boolean {
    return this.value3;
  }

  getNumConfirmations(): BigInt {
    return this.value4;
  }
}

export class MultiSignWallet__transactionsResult {
  value0: Address;
  value1: BigInt;
  value2: Bytes;
  value3: boolean;

  constructor(value0: Address, value1: BigInt, value2: Bytes, value3: boolean) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromBytes(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    return map;
  }

  getTo(): Address {
    return this.value0;
  }

  getValue(): BigInt {
    return this.value1;
  }

  getData(): Bytes {
    return this.value2;
  }

  getExecuted(): boolean {
    return this.value3;
  }
}

export class MultiSignWallet extends ethereum.SmartContract {
  static bind(address: Address): MultiSignWallet {
    return new MultiSignWallet("MultiSignWallet", address);
  }

  getOwnersCount(): BigInt {
    let result = super.call("getOwnersCount", "getOwnersCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getOwnersCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getOwnersCount",
      "getOwnersCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTransaction(_txIndex: BigInt): MultiSignWallet__getTransactionResult {
    let result = super.call(
      "getTransaction",
      "getTransaction(uint256):(address,uint256,bytes,bool,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_txIndex)]
    );

    return new MultiSignWallet__getTransactionResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBytes(),
      result[3].toBoolean(),
      result[4].toBigInt()
    );
  }

  try_getTransaction(
    _txIndex: BigInt
  ): ethereum.CallResult<MultiSignWallet__getTransactionResult> {
    let result = super.tryCall(
      "getTransaction",
      "getTransaction(uint256):(address,uint256,bytes,bool,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_txIndex)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MultiSignWallet__getTransactionResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBytes(),
        value[3].toBoolean(),
        value[4].toBigInt()
      )
    );
  }

  getTransactionCount(): BigInt {
    let result = super.call(
      "getTransactionCount",
      "getTransactionCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getTransactionCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTransactionCount",
      "getTransactionCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isConfirmed(param0: BigInt, param1: Address): boolean {
    let result = super.call(
      "isConfirmed",
      "isConfirmed(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return result[0].toBoolean();
  }

  try_isConfirmed(
    param0: BigInt,
    param1: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isConfirmed",
      "isConfirmed(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isOwner(param0: Address): boolean {
    let result = super.call("isOwner", "isOwner(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_isOwner(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOwner", "isOwner(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  numConfirmationsRequired(): BigInt {
    let result = super.call(
      "numConfirmationsRequired",
      "numConfirmationsRequired():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_numConfirmationsRequired(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "numConfirmationsRequired",
      "numConfirmationsRequired():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owners(param0: BigInt): Address {
    let result = super.call("owners", "owners(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_owners(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("owners", "owners(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  transactions(param0: BigInt): MultiSignWallet__transactionsResult {
    let result = super.call(
      "transactions",
      "transactions(uint256):(address,uint256,bytes,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new MultiSignWallet__transactionsResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBytes(),
      result[3].toBoolean()
    );
  }

  try_transactions(
    param0: BigInt
  ): ethereum.CallResult<MultiSignWallet__transactionsResult> {
    let result = super.tryCall(
      "transactions",
      "transactions(uint256):(address,uint256,bytes,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MultiSignWallet__transactionsResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBytes(),
        value[3].toBoolean()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _owners(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _numConfirmationsRequired(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConfirmTransactionCall extends ethereum.Call {
  get inputs(): ConfirmTransactionCall__Inputs {
    return new ConfirmTransactionCall__Inputs(this);
  }

  get outputs(): ConfirmTransactionCall__Outputs {
    return new ConfirmTransactionCall__Outputs(this);
  }
}

export class ConfirmTransactionCall__Inputs {
  _call: ConfirmTransactionCall;

  constructor(call: ConfirmTransactionCall) {
    this._call = call;
  }

  get _txIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ConfirmTransactionCall__Outputs {
  _call: ConfirmTransactionCall;

  constructor(call: ConfirmTransactionCall) {
    this._call = call;
  }
}

export class ExecuteTransactionCall extends ethereum.Call {
  get inputs(): ExecuteTransactionCall__Inputs {
    return new ExecuteTransactionCall__Inputs(this);
  }

  get outputs(): ExecuteTransactionCall__Outputs {
    return new ExecuteTransactionCall__Outputs(this);
  }
}

export class ExecuteTransactionCall__Inputs {
  _call: ExecuteTransactionCall;

  constructor(call: ExecuteTransactionCall) {
    this._call = call;
  }

  get _txIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ExecuteTransactionCall__Outputs {
  _call: ExecuteTransactionCall;

  constructor(call: ExecuteTransactionCall) {
    this._call = call;
  }
}

export class RevokeConfirmationCall extends ethereum.Call {
  get inputs(): RevokeConfirmationCall__Inputs {
    return new RevokeConfirmationCall__Inputs(this);
  }

  get outputs(): RevokeConfirmationCall__Outputs {
    return new RevokeConfirmationCall__Outputs(this);
  }
}

export class RevokeConfirmationCall__Inputs {
  _call: RevokeConfirmationCall;

  constructor(call: RevokeConfirmationCall) {
    this._call = call;
  }

  get _txIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RevokeConfirmationCall__Outputs {
  _call: RevokeConfirmationCall;

  constructor(call: RevokeConfirmationCall) {
    this._call = call;
  }
}

export class SubmitTransactionCall extends ethereum.Call {
  get inputs(): SubmitTransactionCall__Inputs {
    return new SubmitTransactionCall__Inputs(this);
  }

  get outputs(): SubmitTransactionCall__Outputs {
    return new SubmitTransactionCall__Outputs(this);
  }
}

export class SubmitTransactionCall__Inputs {
  _call: SubmitTransactionCall;

  constructor(call: SubmitTransactionCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class SubmitTransactionCall__Outputs {
  _call: SubmitTransactionCall;

  constructor(call: SubmitTransactionCall) {
    this._call = call;
  }
}
